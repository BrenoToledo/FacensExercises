# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fm7kyxGUYzisNIssA32aK1YEsiUve9QB
"""

def partition(arr, low, high):
    i = (low-1)         # índice de elemento menor
    pivot = arr[high]     # pivot
  
    for j in range(low, high):
  
        # Se o elemento atual for menor que ou
        # igual ao pivô
        if arr[j] <= pivot:
  
            # índice de incremento de elemento menor
            i = i+1
            arr[i], arr[j] = arr[j], arr[i]
  
    arr[i+1], arr[high] = arr[high], arr[i+1]
    return (i+1)
  
# A função principal que implementa QuickSort
# arr [] -> Array a ser classificado,
# low -> Índice inicial,
# high -> Índice final
  
# Função para fazer classificação rápida
  
  
def quickSort(arr, low, high):
    if len(arr) == 1:
        return arr
    if low < high:
  
        
# pi é índice de particionamento, arr [p] agora é
        # no lugar certo
        pi = partition(arr, low, high)
  
        # Classifique os elementos separadamente antes
        # partição e depois da partição
        quickSort(arr, low, pi-1)
        quickSort(arr, pi+1, high)
  
  
# Código do driver para testar acima
arr = [10, 7, 8, 9, 1, 5]
n = len(arr)
quickSort(arr, 0, n-1)
print("Sorted array is:")
for i in range(n):
    print("%d" % arr[i]),