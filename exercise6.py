# -*- coding: utf-8 -*-
"""Cópia de colab-github-demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wctSUKoQM7jQ1PwUiva6TdD_kMjw9NWm

# Exercicio 06

Ex. 06 – Implemente uma classe especial de ordenação, chamada OrdenaEspecial. Essa
classe deverá ter dois atributos:
• lista: contém uma lista de números. Esse atributo deverá ser obrigatório na
instanciação do objeto.
• metodo: contém o nome de um método de ordenação. Esse atributo deverá ser
opcional na instanciação do objeto e conter o seguinte valor default: “combina”.
A classe OrdenaEspecial deverá conter também três métodos:
• método chamado ordena-quickSort que faz a ordenação usando o algoritmo quick
sort.
• método chamado ordena-shellSort para fazer a ordenação usando o algoritmo shell
sort.
• método chamado ordena-insertionSort para fazer a ordenação usando o algoritmo
insertion sort.
• método chamado ordenar que irá executar uma das seguintes operações:
◦ se o atributo metodo receber o valor “quick”, deverá ordenar a lista usando o
método ordena-quickSort.
◦ se o atributo metodo receber o valor “shell”, deverá ordenar a lista usando o
método ordena-shellSort.
◦ se o atributo metodo receber o valor “insertion”, deverá ordenar a lista usando o
método ordena-insertionSort.
◦ Se o atributo metodo estiver com o valor default combina, deverá ordenar a
metade da lista usando o método ordena-quickSort, a segunda metade usando
o método ordena-shellSort. Por fim, deve combinar as duas metades
ordenadas anteriormente e ordená-las com o método ordena-insertionSort.
▪ Esse método deverá retornar a lista ordenada.
Crie um vetor de 40 números aleatórios e faça os seguintes testes:
• Crie um objeto chamado ordena1, que instancie a classe OrdenaEspecial
passando como parâmetro a lista de números e o parâmetro metodo = “shell”.
• Crie um objeto chamado ordena2, que instancie a classe OrdenaEspecial
passando como parâmetro a lista de números e o parâmetro metodo = “insertion”.
• Crie um objeto chamado ordena3, que instancie a classe OrdenaEspecial
passando como parâmetro a lista de números e o parâmetro metodo = “quick”.
• Crie um objeto chamado ordena4, que instancie a classe OrdenaEspecial
passando como parâmetro apenas a lista de números. Neste teste, o parâmetro
metodo não deve ser informado.
Para cada um dos quatro objetos criados, use o método ordena para fazer a
ordenação.
Ex.

Shell Sort
"""



#CODIGOS DE DA APRESENTADOS NA AULA

def shellSort(alist):
    sublistcount = len(alist)//2
    while sublistcount > 0:

      for startposition in range(sublistcount):
        gapInsertionSort(alist,startposition,sublistcount)

      #print("After increments of size",sublistcount,"The list is",alist)

      sublistcount = sublistcount // 2

    return alist

def gapInsertionSort(alist,start,gap):
    for i in range(start+gap,len(alist),gap):

        currentvalue = alist[i]
        position = i

        while position>=gap and alist[position-gap]>currentvalue:
            alist[position]=alist[position-gap]
            position = position-gap

        alist[position]=currentvalue

def quickSort(alist):
    quickSortHelper(alist,0,len(alist)-1)

def quickSortHelper(alist,first,last):
    if first<last:

        splitpoint = partition(alist,first,last)
        quickSortHelper(alist,first,splitpoint-1)
        quickSortHelper(alist,splitpoint+1,last)


def partition(alist,first,last):
    pivotvalue = alist[first]

    leftmark = first+1
    rightmark = last

    done = False
    
    while not done:

      while leftmark <= rightmark and alist[leftmark] <= pivotvalue:
          leftmark = leftmark + 1

      while alist[rightmark] >= pivotvalue and rightmark >= leftmark:
          rightmark = rightmark -1

      if rightmark < leftmark:
          done = True
      else:
          temp = alist[leftmark]
          alist[leftmark] = alist[rightmark]
          alist[rightmark] = temp

      temp = alist[first]
      alist[first] = alist[rightmark]
      alist[rightmark] = temp

      print('teste',rightmark)
      return rightmark

# Programa Python para implementação de Insertion Sort
  
# Função para fazer a classificação por inserção
def insertionSort(arr):
  
   # Atravessar de 1 para len (arr)
    for i in range(1, len(arr)):
  
        key = arr[i]
  
        # Mova os elementos de arr [0..i-1], que são
        # maior que chave, para uma posição à frente
        # de sua posição atual
        j = i-1
        while j >=0 and key < arr[j] :
                arr[j+1] = arr[j]
                j -= 1
        arr[j+1] = key


#CÓDIGO ESPECIAL PARA
class OrdenaEspecial:
    def __init__(self, lista, metodo='combina'):
        self.lista = lista
        self.metodo = metodo

    def ordena_quickSort(self):
        return quickSort(self.lista)

    def ordena_shellSort(self):
        return shellSort(self.lista)

    def ordena_insertionSort(self):
        return insertionSort(self.lista)

    def ordenar(self):

        if self.metodo == 'quick':
          print('Metodo quick foi escolhido')
          return ordena_quickSort(self.lista)

        elif self.metodo == 'shell':
          print('Metodo shell foi escolhido')
          return shellSort(self.lista)

        elif self.metodo == 'insertion':
          return insertionSort(self.lista)
              
        elif self.metodo == 'combina':
          print('Metodo combina foi escolhido')

        else:
          print('Nenhum Metodo foi identificado, tente novamente com (quick, shell, insertion, combina)')

if __name__ == '__main__':
    

    alist = [60,40,52,21,78,23,23,5,2,65,3,52,76,2,5,7]

    teste = OrdenaEspecial(alist,'quick')
    print(teste.ordenar())

    teste = OrdenaEspecial(alist,'shell')
    print(teste.ordenar())

    teste = OrdenaEspecial(alist,'insertion')
    print(teste.ordenar())

    teste = OrdenaEspecial(alist,'combina')
    print(teste.ordenar())
